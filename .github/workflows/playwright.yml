name: E2E (Playwright)

on:
  push:
    branches: [ main ]
  pull_request:

permissions:
  contents: read
  pages: write
  id-token: write
  pull-requests: write

# Pages 競合回避
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  test:
    name: Run E2E on ${{ matrix.project }}
    runs-on: ubuntu-latest
    timeout-minutes: 25
    strategy:
      fail-fast: false
      matrix:
        project: [chromium, firefox, webkit]
      max-parallel: 3

    env:
      CI: true
      NEXT_PUBLIC_BASE_URL: "http://127.0.0.1:3100"
      PW_BASE_URL: "http://127.0.0.1:3100"
      E2E_STRIPE_MOCK: "1"
      STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
      STRIPE_PUBLISHABLE_KEY: ${{ secrets.STRIPE_PUBLISHABLE_KEY }}
      DATABASE_URL: "file:./prisma/dev.db"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install deps
        run: npm ci

      - name: Generate Prisma client
        run: npx prisma generate

      - name: Prepare SQLite (prisma db push)
        run: |
          mkdir -p prisma
          npx prisma db push --skip-generate

      - name: Build Next.js
        run: npm run build

      - name: Verify Next.js build output
        run: |
          echo "BASE_URL=$NEXT_PUBLIC_BASE_URL"
          if [ ! -d ".next" ]; then
            echo "::error::.next directory not found. Did 'npm run build' succeed?"
            exit 1
          fi
          ls -la .next || true
          if [ -f ".next/BUILD_ID" ]; then
            echo "BUILD_ID: $(cat .next/BUILD_ID)"
          else
            echo "::warning::.next/BUILD_ID not found (acceptable on some Next versions)."
          fi

      - name: Install Playwright browsers & deps
        run: npx playwright install --with-deps

      - name: Run tests (fast) ${{ matrix.project }}
        run: >
          npx playwright test
          --project="${{ matrix.project }}"
          --workers=1
          --reporter=list,junit,blob
        env:
          E2E_DEBUG: "0"

      - name: Retry with debug trace ${{ matrix.project }}
        if: failure()
        run: >
          npx playwright test
          --project="${{ matrix.project }}"
          --workers=1
          --retries=1
          --reporter=list,junit,blob
        env:
          E2E_DEBUG: "2"

      - name: Upload blob report (per-project)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: blob-${{ matrix.project }}
          path: blob-report
          if-no-files-found: warn
          retention-days: 7

      - name: Upload JUnit XML (per-project)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: junit-${{ matrix.project }}
          path: junit.xml
          if-no-files-found: warn
          retention-days: 30

  publish:
    name: Publish dev portal & HTML report to GitHub Pages
    needs: [test]
    runs-on: ubuntu-latest
    if: ${{ always() }}
    timeout-minutes: 20

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node (for merge tool)
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dev deps
        run: npm ci

      - name: Download all blob reports
        uses: actions/download-artifact@v4
        with:
          pattern: blob-*
          path: ./test-results/blobs
          merge-multiple: true

      # blob があれば単一HTMLにマージ（無ければ /site のみ公開）
      - name: Check & merge Playwright reports
        id: merge_html
        run: |
          shopt -s nullglob
          files=( ./test-results/blobs/**/metadata.json ./test-results/blobs/**/blob-report/* )
          if [ ${#files[@]} -gt 0 ]; then
            echo "found=true" >> "$GITHUB_OUTPUT"
            npx playwright merge-reports --reporter html ./test-results/blobs
          else
            echo "found=false" >> "$GITHUB_OUTPUT"
            echo "::notice:: No blob reports found; will publish /site only."
          fi

      # ========= Pages へ載せる出力を作成（/site 常時 + レポート任意） =========
      - name: Collect Pages output (site + report)
        run: |
          mkdir -p pages-out
          # 1) /site をそのまま採用
          if [ -d "site" ]; then
            cp -a site/. pages-out/
          else
            echo "::error:: 'site' directory not found in repository."
            exit 1
          fi
          # 2) レポートがあれば /playwright-report/ として同梱
          if [ "${{ steps.merge_html.outputs.found }}" = "true" ] && [ -d "playwright-report" ]; then
            mkdir -p pages-out/playwright-report
            cp -a playwright-report/. pages-out/playwright-report/
          fi
          echo ">>> pages-out tree:"
          ls -la pages-out || true

      # main のとき常時デプロイ
      - name: Setup Pages
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: actions/configure-pages@v5

      - name: Upload Pages artifact
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: actions/upload-pages-artifact@v3
        with:
          path: pages-out

      - name: Deploy to GitHub Pages
        id: deployment
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: actions/deploy-pages@v4

      - name: Add links to job summary
        if: ${{ steps.deployment.outputs.page_url }}
        run: |
          echo "### Dev Portal / Reports" >> "$GITHUB_STEP_SUMMARY"
          echo "🏠 Portal: **${{ steps.deployment.outputs.page_url }}**" >> "$GITHUB_STEP_SUMMARY"
          echo "🧪 Report: **${{ steps.deployment.outputs.page_url }}playwright-report/**" >> "$GITHUB_STEP_SUMMARY"

      - name: Comment on PR with portal & report links
        if: ${{ github.event_name == 'pull_request' && steps.deployment.outputs.page_url }}
        uses: actions/github-script@v7
        with:
          script: |
            const base = `${{ toJson(steps.deployment.outputs.page_url) }}`.replace(/^"|"$/g, '');
            if (!base) return;
            const body = `🏠 **Dev Portal**\n\n${base}\n\n🧪 **Playwright Report**\n\n${base}playwright-report/`;
            const { context, github } = require('@actions/github');
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body
            });
